#version 450 core

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

/*** HEADER ***/

void main() {

	vec2 nodePos = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
	uvec2 node = uvec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y); // grid node index

	uint N = points.length();

	float nodeMass = 0.0;
	vec2 nodeMomentum = vec2(0.0);
	vec2 nodeForce = vec2(0.0);
	
	// P2G
	for (uint p = 0; p < N; ++p) {
		vec2 dpg = nodePos - points[p].x;
		float dx = -dpg.x; // sign matters for gradient
		float dy = -dpg.y;
		float wpg = BSpline(dx) * BSpline(dy);
		vec2 wpgGrad = vec2(BSplineSlope(dx) * BSpline(dy),
							BSpline(dx) * BSplineSlope(dy));

		nodeMass += wpg * points[p].m;
		nodeMomentum += wpg * points[p].m * (points[p].v + points[p].B * Dp_inv * dpg);
		nodeForce -= points[p].vol * points[p].P * transpose(points[p].F) * wpgGrad;
	}

	// Final steps of P2G
	nodes[node.x][node.y].m += nodeMass;
	nodes[node.x][node.y].momentum += nodeMomentum;
	nodes[node.x][node.y].force += nodeForce;
}
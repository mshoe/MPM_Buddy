#version 450 core

layout (local_size_x = 1024) in;

/*** HEADER ***/

uniform bool fixedPointCloud = false;

void main() {

	uint pid = gl_GlobalInvocationID.x;
	uint N = points.length();
	if (pid >= N) { // hopefully this isn't a huge performance hit?
		return;
	}
	
	dvec2 xp = points[pid].x;

	int botLeftNode_i = int(floor(xp.x)) - 1;
	int botLeftNode_j = int(floor(xp.y)) - 1;

	dvec2 vp = dvec2(0.0);
	dmat2 bp = dmat2(0.0);
	dmat2 dfp = dmat2(1.0);

	for (int i = 0; i <= 3; ++i) {
		for (int j = 0; j <= 3; ++j) {
			int curNode_i = botLeftNode_i + i;
			int curNode_j = botLeftNode_j + j;
			double inb = 1.0;
			InBounds(curNode_i, curNode_j, inb);

			dvec2 dpg = dvec2(curNode_i, curNode_j) - xp;
			double dx = -dpg.x; // sign matters for gradient
			double dy = -dpg.y;
			double wpg = BSpline(dx) * BSpline(dy);
			dvec2 wpgGrad = dvec2(BSplineSlope(dx) * BSpline(dy),
								BSpline(dx) * BSplineSlope(dy));

			dvec2 vg = nodes[curNode_i][curNode_j].v*inb; // if inb is 0, then no data is changed
			dfp += dt*outerProduct(vg, wpgGrad)*inb;
			vp += wpg*vg*inb;
			bp += wpg*outerProduct(vg, dpg)*inb;
		}
	}

	points[pid].v = vp;
	points[pid].B = bp;
	//if (!fixedPointCloud)
	points[pid].x += dt*vp;//dt*(dvec2(0.0, -9.8));

	// THIS IS WHERE DIFFERENT CONSTITUTIVE MODELS ARE EVALUATED

	// forces only come from elastic deformation gradient
	if (comodel == NEO_HOOKEAN) {
		points[pid].Fe = dfp*points[pid].Fe;
		dmat2 Fe = points[pid].Fe;
		dmat2 Fit = transpose(inverse(points[pid].Fe));
		double J = determinant(Fe);
		double logJ = double(log(float(J)));
		points[pid].P = mew*(Fe - Fit) + lam*logJ*Fit;

		// energy for visualization purposes
		dmat2 FTF = transpose(Fe) * Fe;
		points[pid].energy = 0.5 * mew * (FTF[0][0] + FTF[1][1] - 2.0 - 2.0 * logJ) + 0.5 * lam * logJ * logJ;
		points[pid].energy *= points[pid].vol;

		// computing these for debugging purposes
		dmat2 R;
		dmat2 S;
		PolarDecomp(Fe, R, S);
		points[pid].FePolar_R = R;
		points[pid].FePolar_S = S;

		dmat2 U;
		double sig1;
		double sig2;
		dmat2 V;
		SVD(R, S, U, sig1, sig2, V);
		points[pid].FeSVD_U = U;
		points[pid].FeSVD_S = dmat2(sig1, 0.0, 0.0, sig2);
		points[pid].FeSVD_V = V;

	} else if (comodel == FIXED_COROTATED) {
		
		points[pid].Fe = dfp*points[pid].Fe;
		dmat2 Fe = points[pid].Fe;
		dmat2 Fit = transpose(inverse(points[pid].Fe));
		double J = determinant(Fe);
		
		// calculate the polar decomposition F = RU.
		// Then calculate P using F and R
		dmat2 R;
		dmat2 S;
		PolarDecomp(Fe, R, S);
		points[pid].FePolar_R = R;
		points[pid].FePolar_S = S;


		// Just computing the SVD here to see if it is done correctly
		dmat2 U;
		double sig1;
		double sig2;
		dmat2 V;
		SVD(R, S, U, sig1, sig2, V);
		points[pid].FeSVD_U = U;
		points[pid].FeSVD_S = dmat2(sig1, 0.0, 0.0, sig2);
		points[pid].FeSVD_V = V;

		points[pid].P = 2.0*mew*(Fe - R) + lam*(J - 1.0)*J*Fit;

		// Also update energy for visualization purposes
		points[pid].energy = mew * ((sig1 - 1.0)*(sig1 - 1.0) + (sig2 - 1.0)*(sig2 - 1.0)) + 0.5 * lam * (J - 1.0)*(J - 1.0);
		points[pid].energy *= points[pid].vol;
	} else if (comodel == SIMPLE_SNOW) {

		// temporarilly update the Fe
		dmat2 Fe = dfp*points[pid].Fe;
		dmat2 Fp = points[pid].Fp;

		dmat2 F_total = Fe*Fp;
		
		// calculate the polar decomposition Fe = RU.
		// then use polar decomp to calculate SVD of Fe
		dmat2 R;
		dmat2 S;

		PolarDecomp(Fe, R, S);

		dmat2 U;
		double sig1;
		double sig2;
		dmat2 V;
		SVD(R, S, U, sig1, sig2, V);

		sig1 = clamp(sig1, 1.0 - crit_c, 1.0 + crit_s);
		sig2 = clamp(sig2, 1.0 - crit_c, 1.0 + crit_s);

		dmat2 sigMat = dmat2(sig1, 0.0, 0.0, sig2);

		
		// finally calculate Fe and Fp
		Fe = U*sigMat*transpose(V);
		Fp = V*inverse(sigMat)*transpose(U)*F_total;

		points[pid].Fe = Fe;
		points[pid].Fp = Fp;

		// update R since Fe is updated
		PolarDecomp(Fe, R, S);
		points[pid].FePolar_R = R;
		points[pid].FePolar_S = S;

		// Computing SVD again for debugging purposes
		SVD(R, S, U, sig1, sig2, V);
		points[pid].FeSVD_U = U;
		points[pid].FeSVD_S = dmat2(sig1, 0.0, 0.0, sig2);
		points[pid].FeSVD_V = V;

		dmat2 Feit = transpose(inverse(Fe));
		double Je = determinant(Fe);
		double Jp = determinant(Fp);

		// need to find a workaround for exp(double)
		//double pcof = 1.0;

		// exp does not work for doubles, so this is a sacrifice we will make for now
		double pcof = double(exp(float(hardening*(1.0-Jp))));

		points[pid].P = 2.0*mew*(Fe - R) + lam*(Je - 1.0)*Je*Feit;
		points[pid].P *= pcof;

		// Also update energy for visualization purposes
		points[pid].energy = mew * ((sig1 - 1.0)*(sig1 - 1.0) + (sig2 - 1.0)*(sig2 - 1.0)) + 0.5 * lam * (Je - 1.0)*(Je - 1.0);
		points[pid].energy *= pcof * points[pid].vol;
	}

}